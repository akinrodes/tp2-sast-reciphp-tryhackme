---
title: Remediation of XSS & SQL Injection in showrecipe.inc.php
author: toto
date: 2025-05-14
project: DevSecOps PHP Challenge
source:
  - tryhackme: DevSecOps Room
  - challenge: Personal project during the room
description: |
  This document outlines the steps taken to secure the PHP file [showrecipe.inc.php](cci:7://file:///c:/Users/toto/Documents/devsecops/reciphp/showrecipe.inc.php:0:0-0:0), which I obtained while completing the TryHackMe DevSecOps room. I turned this vulnerable code into a personal challenge, detecting and fixing critical vulnerabilities (XSS and SQL injection) using Semgrep and DevSecOps best practices.

context:
  - The source file was retrieved during the TryHackMe DevSecOps room.
  - The goal was to transform intentionally vulnerable code into secure code, for learning and professional demonstration purposes.
  - Two custom Semgrep rules were used for analysis:
      - semgrep-rules/echoed-request.yaml (XSS)
      - semgrep-rules/tainted-sql-string.yaml (SQLi)

tools_used:
  - Semgrep (via Docker)
  - Analysis command:
      docker run --rm -v "${PWD}/reciphp:/src" returntocorp/semgrep semgrep --config=/src/semgrep-rules /src/showrecipe.inc.php

vulnerabilities_identified:
  - XSS (Cross-Site Scripting):
      description: |
        User parameters were inserted into HTML without escaping, allowing malicious code execution.
      examples:
        - "Add a comment" and "Print recipe" links directly using $recipeid in the URL.
        - Pagination generating links with unescaped user parameters.
  - SQL Injection:
      description: |
        User parameters were directly injected into SQL queries, exposing the app to injection attacks.
      examples:
        - Retrieving the recipe: SELECT ... WHERE recipeid = $recipeid
        - Retrieving comments: SELECT ... WHERE recipeid = $recipeid ORDER BY ... LIMIT $offset, $recordsperpage

remediations_applied:
  - SQL Injection Protection:
      - Strictly casting the user ID to integer as soon as it is received ($_GET['id']).
      - Migrating all SQL queries to PDO with prepared statements and typed parameters.
      - Removing all usage of the mysql_* API (obsolete and dangerous).
  - XSS Protection:
      - Systematic use of htmlentities() on all variables inserted into HTML that come from user input (e.g., $recipeid, page number).
      - Escaping pagination and action links (add comment, print).
      - Reviewing all echo statements likely to contain user data.

example_code_before:
  sql_injection: |
    $recipeid = $_GET['id'];
    $query = "SELECT ... WHERE recipeid = $recipeid";
    $result = mysql_query($query);
  xss: |
    echo "<a href=\"index.php?content=newcomment&id=$recipeid\">Add a comment</a>";

example_code_after:
  sql_injection: |
    $recipeid = (int)$_GET['id'];
    $stmt = $pdo->prepare("SELECT ... WHERE recipeid = :recipeid");
    $stmt->bindParam(':recipeid', $recipeid, PDO::PARAM_INT);
    $stmt->execute();
  xss: |
    $safe_recipeid = htmlentities($recipeid, ENT_QUOTES, 'UTF-8');
    echo "<a href=\"index.php?content=newcomment&id=$safe_recipeid\">Add a comment</a>";

best_practices:
  - Always validate and type user input before use.
  - Prefer prepared statements (PDO/MySQLi) for all database interactions.
  - Always escape HTML output with htmlentities().
  - Use static analysis tools like Semgrep to detect common vulnerabilities.

semgrep_analysis:
  - Rules used:
      - semgrep-rules/echoed-request.yaml
      - semgrep-rules/tainted-sql-string.yaml
  - Analysis command:
      docker run --rm -v "${PWD}/reciphp:/src" returntocorp/semgrep semgrep --config=/src/semgrep-rules /src/showrecipe.inc.php
  - Expected result:
      - No more critical alerts for XSS or SQLi in the showrecipe.inc.php file

conclusion: |
  This challenge allowed me to practice remediation of OWASP Top 10 vulnerabilities on legacy PHP code, using modern tools (Semgrep, Docker) and professional techniques. The file is now compliant with DevSecOps best practices and ready to be used as an educational example or technical demonstration.

---
